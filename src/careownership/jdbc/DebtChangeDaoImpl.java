/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.jdbc;

import careownership.dao.*;
import careownership.factory.*;
import java.util.Date;
import careownership.dto.*;
import careownership.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DebtChangeDaoImpl extends AbstractDAO implements DebtChangeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT debt_change_id, current_total_debt, current_debt_type, current_debt_description, current_debt_date, mentee_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( debt_change_id, current_total_debt, current_debt_type, current_debt_description, current_debt_date, mentee_id ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET debt_change_id = ?, current_total_debt = ?, current_debt_type = ?, current_debt_description = ?, current_debt_date = ?, mentee_id = ? WHERE debt_change_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE debt_change_id = ?";

	/** 
	 * Index of column debt_change_id
	 */
	protected static final int COLUMN_DEBT_CHANGE_ID = 1;

	/** 
	 * Index of column current_total_debt
	 */
	protected static final int COLUMN_CURRENT_TOTAL_DEBT = 2;

	/** 
	 * Index of column current_debt_type
	 */
	protected static final int COLUMN_CURRENT_DEBT_TYPE = 3;

	/** 
	 * Index of column current_debt_description
	 */
	protected static final int COLUMN_CURRENT_DEBT_DESCRIPTION = 4;

	/** 
	 * Index of column current_debt_date
	 */
	protected static final int COLUMN_CURRENT_DEBT_DATE = 5;

	/** 
	 * Index of column mentee_id
	 */
	protected static final int COLUMN_MENTEE_ID = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column debt_change_id
	 */
	protected static final int PK_COLUMN_DEBT_CHANGE_ID = 1;

	/** 
	 * Inserts a new row in the debt_change table.
	 */
	public DebtChangePk insert(DebtChange dto) throws DebtChangeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getDebtChangeId() );
			if (dto.isCurrentTotalDebtNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCurrentTotalDebt() );
			}
		
			stmt.setString( index++, dto.getCurrentDebtType() );
			stmt.setString( index++, dto.getCurrentDebtDescription() );
			stmt.setDate(index++, dto.getCurrentDebtDate()==null ? null : new java.sql.Date( dto.getCurrentDebtDate().getTime() ) );
			stmt.setInt( index++, dto.getMenteeId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setDebtChangeId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DebtChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the debt_change table.
	 */
	public void update(DebtChangePk pk, DebtChange dto) throws DebtChangeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getDebtChangeId() );
			if (dto.isCurrentTotalDebtNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCurrentTotalDebt() );
			}
		
			stmt.setString( index++, dto.getCurrentDebtType() );
			stmt.setString( index++, dto.getCurrentDebtDescription() );
			stmt.setDate(index++, dto.getCurrentDebtDate()==null ? null : new java.sql.Date( dto.getCurrentDebtDate().getTime() ) );
			stmt.setInt( index++, dto.getMenteeId() );
			stmt.setInt( 7, pk.getDebtChangeId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DebtChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the debt_change table.
	 */
	public void delete(DebtChangePk pk) throws DebtChangeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getDebtChangeId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DebtChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the debt_change table that matches the specified primary-key value.
	 */
	public DebtChange findByPrimaryKey(DebtChangePk pk) throws DebtChangeDaoException
	{
		return findByPrimaryKey( pk.getDebtChangeId() );
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria 'debt_change_id = :debtChangeId'.
	 */
	public DebtChange findByPrimaryKey(int debtChangeId) throws DebtChangeDaoException
	{
		DebtChange ret[] = findByDynamicSelect( SQL_SELECT + " WHERE debt_change_id = ?", new Object[] {  new Integer(debtChangeId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria ''.
	 */
	public DebtChange[] findAll() throws DebtChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY debt_change_id", null );
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria 'mentee_id = :menteeId'.
	 */
	public DebtChange[] findByMentees(int menteeId) throws DebtChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ?", new Object[] {  new Integer(menteeId) } );
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria 'debt_change_id = :debtChangeId'.
	 */
	public DebtChange[] findWhereDebtChangeIdEquals(int debtChangeId) throws DebtChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE debt_change_id = ? ORDER BY debt_change_id", new Object[] {  new Integer(debtChangeId) } );
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria 'current_total_debt = :currentTotalDebt'.
	 */
	public DebtChange[] findWhereCurrentTotalDebtEquals(int currentTotalDebt) throws DebtChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_total_debt = ? ORDER BY current_total_debt", new Object[] {  new Integer(currentTotalDebt) } );
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria 'current_debt_type = :currentDebtType'.
	 */
	public DebtChange[] findWhereCurrentDebtTypeEquals(String currentDebtType) throws DebtChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_debt_type = ? ORDER BY current_debt_type", new Object[] { currentDebtType } );
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria 'current_debt_description = :currentDebtDescription'.
	 */
	public DebtChange[] findWhereCurrentDebtDescriptionEquals(String currentDebtDescription) throws DebtChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_debt_description = ? ORDER BY current_debt_description", new Object[] { currentDebtDescription } );
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria 'current_debt_date = :currentDebtDate'.
	 */
	public DebtChange[] findWhereCurrentDebtDateEquals(Date currentDebtDate) throws DebtChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_debt_date = ? ORDER BY current_debt_date", new Object[] { currentDebtDate==null ? null : new java.sql.Date( currentDebtDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the debt_change table that match the criteria 'mentee_id = :menteeId'.
	 */
	public DebtChange[] findWhereMenteeIdEquals(int menteeId) throws DebtChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ? ORDER BY mentee_id", new Object[] {  new Integer(menteeId) } );
	}

	/**
	 * Method 'DebtChangeDaoImpl'
	 * 
	 */
	public DebtChangeDaoImpl()
	{
	}

	/**
	 * Method 'DebtChangeDaoImpl'
	 * 
	 * @param userConn
	 */
	public DebtChangeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "debt_change";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected DebtChange fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			DebtChange dto = new DebtChange();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected DebtChange[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DebtChange dto = new DebtChange();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		DebtChange ret[] = new DebtChange[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(DebtChange dto, ResultSet rs) throws SQLException
	{
		dto.setDebtChangeId( rs.getInt( COLUMN_DEBT_CHANGE_ID ) );
		dto.setCurrentTotalDebt( rs.getInt( COLUMN_CURRENT_TOTAL_DEBT ) );
		if (rs.wasNull()) {
			dto.setCurrentTotalDebtNull( true );
		}
		
		dto.setCurrentDebtType( rs.getString( COLUMN_CURRENT_DEBT_TYPE ) );
		dto.setCurrentDebtDescription( rs.getString( COLUMN_CURRENT_DEBT_DESCRIPTION ) );
		dto.setCurrentDebtDate( rs.getDate(COLUMN_CURRENT_DEBT_DATE ) );
		dto.setMenteeId( rs.getInt( COLUMN_MENTEE_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(DebtChange dto)
	{
	}

	/** 
	 * Returns all rows from the debt_change table that match the specified arbitrary SQL statement
	 */
	public DebtChange[] findByDynamicSelect(String sql, Object[] sqlParams) throws DebtChangeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DebtChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the debt_change table that match the specified arbitrary SQL statement
	 */
	public DebtChange[] findByDynamicWhere(String sql, Object[] sqlParams) throws DebtChangeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DebtChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
