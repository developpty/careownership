/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.jdbc;

import careownership.dao.*;
import careownership.factory.*;
import careownership.dto.*;
import careownership.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class InitialEmploymentDaoImpl extends AbstractDAO implements InitialEmploymentDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT initial_employment_id, initial_employment_position, initial_employer, initial_employment_earnings, initial_employment_contact_person, initial_employmen_contact_person_contact_info, initial_employment_contact_person_contact_permission, initial_employment_description, initial_employment_duration_months, mentee_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( initial_employment_id, initial_employment_position, initial_employer, initial_employment_earnings, initial_employment_contact_person, initial_employmen_contact_person_contact_info, initial_employment_contact_person_contact_permission, initial_employment_description, initial_employment_duration_months, mentee_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET initial_employment_id = ?, initial_employment_position = ?, initial_employer = ?, initial_employment_earnings = ?, initial_employment_contact_person = ?, initial_employmen_contact_person_contact_info = ?, initial_employment_contact_person_contact_permission = ?, initial_employment_description = ?, initial_employment_duration_months = ?, mentee_id = ? WHERE initial_employment_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE initial_employment_id = ?";

	/** 
	 * Index of column initial_employment_id
	 */
	protected static final int COLUMN_INITIAL_EMPLOYMENT_ID = 1;

	/** 
	 * Index of column initial_employment_position
	 */
	protected static final int COLUMN_INITIAL_EMPLOYMENT_POSITION = 2;

	/** 
	 * Index of column initial_employer
	 */
	protected static final int COLUMN_INITIAL_EMPLOYER = 3;

	/** 
	 * Index of column initial_employment_earnings
	 */
	protected static final int COLUMN_INITIAL_EMPLOYMENT_EARNINGS = 4;

	/** 
	 * Index of column initial_employment_contact_person
	 */
	protected static final int COLUMN_INITIAL_EMPLOYMENT_CONTACT_PERSON = 5;

	/** 
	 * Index of column initial_employmen_contact_person_contact_info
	 */
	protected static final int COLUMN_INITIAL_EMPLOYMEN_CONTACT_PERSON_CONTACT_INFO = 6;

	/** 
	 * Index of column initial_employment_contact_person_contact_permission
	 */
	protected static final int COLUMN_INITIAL_EMPLOYMENT_CONTACT_PERSON_CONTACT_PERMISSION = 7;

	/** 
	 * Index of column initial_employment_description
	 */
	protected static final int COLUMN_INITIAL_EMPLOYMENT_DESCRIPTION = 8;

	/** 
	 * Index of column initial_employment_duration_months
	 */
	protected static final int COLUMN_INITIAL_EMPLOYMENT_DURATION_MONTHS = 9;

	/** 
	 * Index of column mentee_id
	 */
	protected static final int COLUMN_MENTEE_ID = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column initial_employment_id
	 */
	protected static final int PK_COLUMN_INITIAL_EMPLOYMENT_ID = 1;

	/** 
	 * Inserts a new row in the initial_employment table.
	 */
	public InitialEmploymentPk insert(InitialEmployment dto) throws InitialEmploymentDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getInitialEmploymentId() );
			stmt.setString( index++, dto.getInitialEmploymentPosition() );
			stmt.setString( index++, dto.getInitialEmployer() );
			if (dto.isInitialEmploymentEarningsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getInitialEmploymentEarnings() );
			}
		
			stmt.setString( index++, dto.getInitialEmploymentContactPerson() );
			stmt.setString( index++, dto.getInitialEmploymenContactPersonContactInfo() );
			stmt.setString( index++, dto.getInitialEmploymentContactPersonContactPermission() );
			stmt.setString( index++, dto.getInitialEmploymentDescription() );
			if (dto.isInitialEmploymentDurationMonthsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getInitialEmploymentDurationMonths() );
			}
		
			stmt.setInt( index++, dto.getMenteeId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setInitialEmploymentId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InitialEmploymentDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the initial_employment table.
	 */
	public void update(InitialEmploymentPk pk, InitialEmployment dto) throws InitialEmploymentDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getInitialEmploymentId() );
			stmt.setString( index++, dto.getInitialEmploymentPosition() );
			stmt.setString( index++, dto.getInitialEmployer() );
			if (dto.isInitialEmploymentEarningsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getInitialEmploymentEarnings() );
			}
		
			stmt.setString( index++, dto.getInitialEmploymentContactPerson() );
			stmt.setString( index++, dto.getInitialEmploymenContactPersonContactInfo() );
			stmt.setString( index++, dto.getInitialEmploymentContactPersonContactPermission() );
			stmt.setString( index++, dto.getInitialEmploymentDescription() );
			if (dto.isInitialEmploymentDurationMonthsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getInitialEmploymentDurationMonths() );
			}
		
			stmt.setInt( index++, dto.getMenteeId() );
			stmt.setInt( 11, pk.getInitialEmploymentId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InitialEmploymentDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the initial_employment table.
	 */
	public void delete(InitialEmploymentPk pk) throws InitialEmploymentDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getInitialEmploymentId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InitialEmploymentDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the initial_employment table that matches the specified primary-key value.
	 */
	public InitialEmployment findByPrimaryKey(InitialEmploymentPk pk) throws InitialEmploymentDaoException
	{
		return findByPrimaryKey( pk.getInitialEmploymentId() );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employment_id = :initialEmploymentId'.
	 */
	public InitialEmployment findByPrimaryKey(int initialEmploymentId) throws InitialEmploymentDaoException
	{
		InitialEmployment ret[] = findByDynamicSelect( SQL_SELECT + " WHERE initial_employment_id = ?", new Object[] {  new Integer(initialEmploymentId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria ''.
	 */
	public InitialEmployment[] findAll() throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY initial_employment_id", null );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'mentee_id = :menteeId'.
	 */
	public InitialEmployment[] findByMentees(int menteeId) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ?", new Object[] {  new Integer(menteeId) } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employment_id = :initialEmploymentId'.
	 */
	public InitialEmployment[] findWhereInitialEmploymentIdEquals(int initialEmploymentId) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employment_id = ? ORDER BY initial_employment_id", new Object[] {  new Integer(initialEmploymentId) } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employment_position = :initialEmploymentPosition'.
	 */
	public InitialEmployment[] findWhereInitialEmploymentPositionEquals(String initialEmploymentPosition) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employment_position = ? ORDER BY initial_employment_position", new Object[] { initialEmploymentPosition } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employer = :initialEmployer'.
	 */
	public InitialEmployment[] findWhereInitialEmployerEquals(String initialEmployer) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employer = ? ORDER BY initial_employer", new Object[] { initialEmployer } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employment_earnings = :initialEmploymentEarnings'.
	 */
	public InitialEmployment[] findWhereInitialEmploymentEarningsEquals(int initialEmploymentEarnings) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employment_earnings = ? ORDER BY initial_employment_earnings", new Object[] {  new Integer(initialEmploymentEarnings) } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employment_contact_person = :initialEmploymentContactPerson'.
	 */
	public InitialEmployment[] findWhereInitialEmploymentContactPersonEquals(String initialEmploymentContactPerson) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employment_contact_person = ? ORDER BY initial_employment_contact_person", new Object[] { initialEmploymentContactPerson } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employmen_contact_person_contact_info = :initialEmploymenContactPersonContactInfo'.
	 */
	public InitialEmployment[] findWhereInitialEmploymenContactPersonContactInfoEquals(String initialEmploymenContactPersonContactInfo) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employmen_contact_person_contact_info = ? ORDER BY initial_employmen_contact_person_contact_info", new Object[] { initialEmploymenContactPersonContactInfo } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employment_contact_person_contact_permission = :initialEmploymentContactPersonContactPermission'.
	 */
	public InitialEmployment[] findWhereInitialEmploymentContactPersonContactPermissionEquals(String initialEmploymentContactPersonContactPermission) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employment_contact_person_contact_permission = ? ORDER BY initial_employment_contact_person_contact_permission", new Object[] { initialEmploymentContactPersonContactPermission } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employment_description = :initialEmploymentDescription'.
	 */
	public InitialEmployment[] findWhereInitialEmploymentDescriptionEquals(String initialEmploymentDescription) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employment_description = ? ORDER BY initial_employment_description", new Object[] { initialEmploymentDescription } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'initial_employment_duration_months = :initialEmploymentDurationMonths'.
	 */
	public InitialEmployment[] findWhereInitialEmploymentDurationMonthsEquals(int initialEmploymentDurationMonths) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_employment_duration_months = ? ORDER BY initial_employment_duration_months", new Object[] {  new Integer(initialEmploymentDurationMonths) } );
	}

	/** 
	 * Returns all rows from the initial_employment table that match the criteria 'mentee_id = :menteeId'.
	 */
	public InitialEmployment[] findWhereMenteeIdEquals(int menteeId) throws InitialEmploymentDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ? ORDER BY mentee_id", new Object[] {  new Integer(menteeId) } );
	}

	/**
	 * Method 'InitialEmploymentDaoImpl'
	 * 
	 */
	public InitialEmploymentDaoImpl()
	{
	}

	/**
	 * Method 'InitialEmploymentDaoImpl'
	 * 
	 * @param userConn
	 */
	public InitialEmploymentDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "initial_employment";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected InitialEmployment fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			InitialEmployment dto = new InitialEmployment();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected InitialEmployment[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			InitialEmployment dto = new InitialEmployment();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		InitialEmployment ret[] = new InitialEmployment[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(InitialEmployment dto, ResultSet rs) throws SQLException
	{
		dto.setInitialEmploymentId( rs.getInt( COLUMN_INITIAL_EMPLOYMENT_ID ) );
		dto.setInitialEmploymentPosition( rs.getString( COLUMN_INITIAL_EMPLOYMENT_POSITION ) );
		dto.setInitialEmployer( rs.getString( COLUMN_INITIAL_EMPLOYER ) );
		dto.setInitialEmploymentEarnings( rs.getInt( COLUMN_INITIAL_EMPLOYMENT_EARNINGS ) );
		if (rs.wasNull()) {
			dto.setInitialEmploymentEarningsNull( true );
		}
		
		dto.setInitialEmploymentContactPerson( rs.getString( COLUMN_INITIAL_EMPLOYMENT_CONTACT_PERSON ) );
		dto.setInitialEmploymenContactPersonContactInfo( rs.getString( COLUMN_INITIAL_EMPLOYMEN_CONTACT_PERSON_CONTACT_INFO ) );
		dto.setInitialEmploymentContactPersonContactPermission( rs.getString( COLUMN_INITIAL_EMPLOYMENT_CONTACT_PERSON_CONTACT_PERMISSION ) );
		dto.setInitialEmploymentDescription( rs.getString( COLUMN_INITIAL_EMPLOYMENT_DESCRIPTION ) );
		dto.setInitialEmploymentDurationMonths( rs.getInt( COLUMN_INITIAL_EMPLOYMENT_DURATION_MONTHS ) );
		if (rs.wasNull()) {
			dto.setInitialEmploymentDurationMonthsNull( true );
		}
		
		dto.setMenteeId( rs.getInt( COLUMN_MENTEE_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(InitialEmployment dto)
	{
	}

	/** 
	 * Returns all rows from the initial_employment table that match the specified arbitrary SQL statement
	 */
	public InitialEmployment[] findByDynamicSelect(String sql, Object[] sqlParams) throws InitialEmploymentDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InitialEmploymentDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the initial_employment table that match the specified arbitrary SQL statement
	 */
	public InitialEmployment[] findByDynamicWhere(String sql, Object[] sqlParams) throws InitialEmploymentDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InitialEmploymentDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
