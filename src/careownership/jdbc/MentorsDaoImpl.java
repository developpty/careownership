/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.jdbc;

import careownership.dao.*;
import careownership.factory.*;
import java.util.Date;
import careownership.dto.*;
import careownership.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class MentorsDaoImpl extends AbstractDAO implements MentorsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT mentor_id, login_name, password, first_name, last_name, middle_initial, age, address, apt#, city, state, zipcode, sex, highest_education_level, notes, birth_date, emergency_contact, emergency_contact_description, emergency_contact_contact_info FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( mentor_id, login_name, password, first_name, last_name, middle_initial, age, address, apt#, city, state, zipcode, sex, highest_education_level, notes, birth_date, emergency_contact, emergency_contact_description, emergency_contact_contact_info ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET mentor_id = ?, login_name = ?, password = ?, first_name = ?, last_name = ?, middle_initial = ?, age = ?, address = ?, apt# = ?, city = ?, state = ?, zipcode = ?, sex = ?, highest_education_level = ?, notes = ?, birth_date = ?, emergency_contact = ?, emergency_contact_description = ?, emergency_contact_contact_info = ? WHERE mentor_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE mentor_id = ?";

	/** 
	 * Index of column mentor_id
	 */
	protected static final int COLUMN_MENTOR_ID = 1;

	/** 
	 * Index of column login_name
	 */
	protected static final int COLUMN_LOGIN_NAME = 2;

	/** 
	 * Index of column password
	 */
	protected static final int COLUMN_PASSWORD = 3;

	/** 
	 * Index of column first_name
	 */
	protected static final int COLUMN_FIRST_NAME = 4;

	/** 
	 * Index of column last_name
	 */
	protected static final int COLUMN_LAST_NAME = 5;

	/** 
	 * Index of column middle_initial
	 */
	protected static final int COLUMN_MIDDLE_INITIAL = 6;

	/** 
	 * Index of column age
	 */
	protected static final int COLUMN_AGE = 7;

	/** 
	 * Index of column address
	 */
	protected static final int COLUMN_ADDRESS = 8;

	/** 
	 * Index of column apt#
	 */
	protected static final int COLUMN_APT = 9;

	/** 
	 * Index of column city
	 */
	protected static final int COLUMN_CITY = 10;

	/** 
	 * Index of column state
	 */
	protected static final int COLUMN_STATE = 11;

	/** 
	 * Index of column zipcode
	 */
	protected static final int COLUMN_ZIPCODE = 12;

	/** 
	 * Index of column sex
	 */
	protected static final int COLUMN_SEX = 13;

	/** 
	 * Index of column highest_education_level
	 */
	protected static final int COLUMN_HIGHEST_EDUCATION_LEVEL = 14;

	/** 
	 * Index of column notes
	 */
	protected static final int COLUMN_NOTES = 15;

	/** 
	 * Index of column birth_date
	 */
	protected static final int COLUMN_BIRTH_DATE = 16;

	/** 
	 * Index of column emergency_contact
	 */
	protected static final int COLUMN_EMERGENCY_CONTACT = 17;

	/** 
	 * Index of column emergency_contact_description
	 */
	protected static final int COLUMN_EMERGENCY_CONTACT_DESCRIPTION = 18;

	/** 
	 * Index of column emergency_contact_contact_info
	 */
	protected static final int COLUMN_EMERGENCY_CONTACT_CONTACT_INFO = 19;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 19;

	/** 
	 * Index of primary-key column mentor_id
	 */
	protected static final int PK_COLUMN_MENTOR_ID = 1;

	/** 
	 * Inserts a new row in the mentors table.
	 */
	public MentorsPk insert(Mentors dto) throws MentorsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getMentorId() );
			stmt.setString( index++, dto.getLoginName() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getFirstName() );
			stmt.setString( index++, dto.getLastName() );
			stmt.setString( index++, dto.getMiddleInitial() );
			if (dto.isAgeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAge() );
			}
		
			stmt.setString( index++, dto.getAddress() );
			stmt.setString( index++, dto.getApt() );
			stmt.setString( index++, dto.getCity() );
			stmt.setString( index++, dto.getState() );
			stmt.setString( index++, dto.getZipcode() );
			stmt.setString( index++, dto.getSex() );
			stmt.setString( index++, dto.getHighestEducationLevel() );
			stmt.setString( index++, dto.getNotes() );
			stmt.setDate(index++, dto.getBirthDate()==null ? null : new java.sql.Date( dto.getBirthDate().getTime() ) );
			stmt.setString( index++, dto.getEmergencyContact() );
			stmt.setString( index++, dto.getEmergencyContactDescription() );
			stmt.setString( index++, dto.getEmergencyContactContactInfo() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setMentorId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MentorsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the mentors table.
	 */
	public void update(MentorsPk pk, Mentors dto) throws MentorsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getMentorId() );
			stmt.setString( index++, dto.getLoginName() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getFirstName() );
			stmt.setString( index++, dto.getLastName() );
			stmt.setString( index++, dto.getMiddleInitial() );
			if (dto.isAgeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAge() );
			}
		
			stmt.setString( index++, dto.getAddress() );
			stmt.setString( index++, dto.getApt() );
			stmt.setString( index++, dto.getCity() );
			stmt.setString( index++, dto.getState() );
			stmt.setString( index++, dto.getZipcode() );
			stmt.setString( index++, dto.getSex() );
			stmt.setString( index++, dto.getHighestEducationLevel() );
			stmt.setString( index++, dto.getNotes() );
			stmt.setDate(index++, dto.getBirthDate()==null ? null : new java.sql.Date( dto.getBirthDate().getTime() ) );
			stmt.setString( index++, dto.getEmergencyContact() );
			stmt.setString( index++, dto.getEmergencyContactDescription() );
			stmt.setString( index++, dto.getEmergencyContactContactInfo() );
			stmt.setInt( 20, pk.getMentorId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MentorsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the mentors table.
	 */
	public void delete(MentorsPk pk) throws MentorsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getMentorId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MentorsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the mentors table that matches the specified primary-key value.
	 */
	public Mentors findByPrimaryKey(MentorsPk pk) throws MentorsDaoException
	{
		return findByPrimaryKey( pk.getMentorId() );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'mentor_id = :mentorId'.
	 */
	public Mentors findByPrimaryKey(int mentorId) throws MentorsDaoException
	{
		Mentors ret[] = findByDynamicSelect( SQL_SELECT + " WHERE mentor_id = ?", new Object[] {  new Integer(mentorId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'full_name = :fullName'.
	 */
	public Mentors[] findWhereFullNameEquals(String fullName) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE full_name = ? ORDER BY full_name", new Object[] { fullName } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria ''.
	 */
	public Mentors[] findAll() throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY mentor_id", null );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'mentor_id = :mentorId'.
	 */
	public Mentors[] findWhereMentorIdEquals(int mentorId) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentor_id = ? ORDER BY mentor_id", new Object[] {  new Integer(mentorId) } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'first_name = :firstName'.
	 */
	public Mentors[] findWhereFirstNameEquals(String firstName) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE first_name = ? ORDER BY first_name", new Object[] { firstName } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'last_name = :lastName'.
	 */
	public Mentors[] findWhereLastNameEquals(String lastName) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE last_name = ? ORDER BY last_name", new Object[] { lastName } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'middle_initial = :middleInitial'.
	 */
	public Mentors[] findWhereMiddleInitialEquals(String middleInitial) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE middle_initial = ? ORDER BY middle_initial", new Object[] { middleInitial } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'age = :age'.
	 */
	public Mentors[] findWhereAgeEquals(int age) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE age = ? ORDER BY age", new Object[] {  new Integer(age) } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'address = :address'.
	 */
	public Mentors[] findWhereAddressEquals(String address) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE address = ? ORDER BY address", new Object[] { address } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'apt# = :apt'.
	 */
	public Mentors[] findWhereAptEquals(String apt) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE apt# = ? ORDER BY apt#", new Object[] { apt } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'city = :city'.
	 */
	public Mentors[] findWhereCityEquals(String city) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE city = ? ORDER BY city", new Object[] { city } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'state = :state'.
	 */
	public Mentors[] findWhereStateEquals(String state) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE state = ? ORDER BY state", new Object[] { state } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'zipcode = :zipcode'.
	 */
	public Mentors[] findWhereZipcodeEquals(String zipcode) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE zipcode = ? ORDER BY zipcode", new Object[] { zipcode } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'sex = :sex'.
	 */
	public Mentors[] findWhereSexEquals(String sex) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sex = ? ORDER BY sex", new Object[] { sex } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'highest_education_level = :highestEducationLevel'.
	 */
	public Mentors[] findWhereHighestEducationLevelEquals(String highestEducationLevel) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE highest_education_level = ? ORDER BY highest_education_level", new Object[] { highestEducationLevel } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'notes = :notes'.
	 */
	public Mentors[] findWhereNotesEquals(String notes) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE notes = ? ORDER BY notes", new Object[] { notes } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'birth_date = :birthDate'.
	 */
	public Mentors[] findWhereBirthDateEquals(Date birthDate) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE birth_date = ? ORDER BY birth_date", new Object[] { birthDate==null ? null : new java.sql.Date( birthDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'emergency_contact = :emergencyContact'.
	 */
	public Mentors[] findWhereEmergencyContactEquals(String emergencyContact) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE emergency_contact = ? ORDER BY emergency_contact", new Object[] { emergencyContact } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'emergency_contact_description = :emergencyContactDescription'.
	 */
	public Mentors[] findWhereEmergencyContactDescriptionEquals(String emergencyContactDescription) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE emergency_contact_description = ? ORDER BY emergency_contact_description", new Object[] { emergencyContactDescription } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'emergency_contact_contact_info = :emergencyContactContactInfo'.
	 */
	public Mentors[] findWhereEmergencyContactContactInfoEquals(String emergencyContactContactInfo) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE emergency_contact_contact_info = ? ORDER BY emergency_contact_contact_info", new Object[] { emergencyContactContactInfo } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'login_name = :loginName'.
	 */
	public Mentors[] findWhereLoginNameEquals(String loginName) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE login_name = ? ORDER BY login_name", new Object[] { loginName } );
	}

	/** 
	 * Returns all rows from the mentors table that match the criteria 'password = :password'.
	 */
	public Mentors[] findWherePasswordEquals(String password) throws MentorsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password = ? ORDER BY password", new Object[] { password } );
	}

	/**
	 * Method 'MentorsDaoImpl'
	 * 
	 */
	public MentorsDaoImpl()
	{
	}

	/**
	 * Method 'MentorsDaoImpl'
	 * 
	 * @param userConn
	 */
	public MentorsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "mentors";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Mentors fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Mentors dto = new Mentors();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Mentors[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Mentors dto = new Mentors();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Mentors ret[] = new Mentors[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Mentors dto, ResultSet rs) throws SQLException
	{
		dto.setMentorId( rs.getInt( COLUMN_MENTOR_ID ) );
		dto.setLoginName( rs.getString( COLUMN_LOGIN_NAME ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setFirstName( rs.getString( COLUMN_FIRST_NAME ) );
		dto.setLastName( rs.getString( COLUMN_LAST_NAME ) );
		dto.setMiddleInitial( rs.getString( COLUMN_MIDDLE_INITIAL ) );
		dto.setAge( rs.getInt( COLUMN_AGE ) );
		if (rs.wasNull()) {
			dto.setAgeNull( true );
		}
		
		dto.setAddress( rs.getString( COLUMN_ADDRESS ) );
		dto.setApt( rs.getString( COLUMN_APT ) );
		dto.setCity( rs.getString( COLUMN_CITY ) );
		dto.setState( rs.getString( COLUMN_STATE ) );
		dto.setZipcode( rs.getString( COLUMN_ZIPCODE ) );
		dto.setSex( rs.getString( COLUMN_SEX ) );
		dto.setHighestEducationLevel( rs.getString( COLUMN_HIGHEST_EDUCATION_LEVEL ) );
		dto.setNotes( rs.getString( COLUMN_NOTES ) );
		dto.setBirthDate( rs.getDate(COLUMN_BIRTH_DATE ) );
		dto.setEmergencyContact( rs.getString( COLUMN_EMERGENCY_CONTACT ) );
		dto.setEmergencyContactDescription( rs.getString( COLUMN_EMERGENCY_CONTACT_DESCRIPTION ) );
		dto.setEmergencyContactContactInfo( rs.getString( COLUMN_EMERGENCY_CONTACT_CONTACT_INFO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Mentors dto)
	{
	}

	/** 
	 * Returns all rows from the mentors table that match the specified arbitrary SQL statement
	 */
	public Mentors[] findByDynamicSelect(String sql, Object[] sqlParams) throws MentorsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MentorsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the mentors table that match the specified arbitrary SQL statement
	 */
	public Mentors[] findByDynamicWhere(String sql, Object[] sqlParams) throws MentorsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MentorsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
