/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.jdbc;

import careownership.dao.*;
import careownership.factory.*;

import java.util.Date;

import careownership.dto.*;
import careownership.exceptions.*;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class MenteesDaoImpl extends AbstractDAO implements MenteesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT mentee_id, first_name, last_name, sex, age, address, zipcode, highest_education_level, pretraining_completed, pretraining_date_complete, ltp1_completed, ltp1_date_complete, ltp2_completed, ltp2_date_complete, ltp3_completed, ltp3_date_complete, ltp4_completed, ltp4_date_complete, other_goals, current_saving, notes, middle_initial, apt#, city, state, marital_status, birth_date, emergency_contact, emergency_contact_description, emergency_contact_info FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected String SQL_INSERT = "INSERT INTO " + getTableName() + " ( mentee_id, first_name, last_name, sex, age, address, zipcode, highest_education_level, pretraining_completed, pretraining_date_complete, ltp1_completed, ltp1_date_complete, ltp2_completed, ltp2_date_complete, ltp3_completed, ltp3_date_complete, ltp4_completed, ltp4_date_complete, other_goals, current_saving, notes, middle_initial, apt#, city, state, marital_status, birth_date, emergency_contact, emergency_contact_description, emergency_contact_info ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET mentee_id = ?, first_name = ?, last_name = ?, sex = ?, age = ?, address = ?, zipcode = ?, highest_education_level = ?, pretraining_completed = ?, pretraining_date_complete = ?, ltp1_completed = ?, ltp1_date_complete = ?, ltp2_completed = ?, ltp2_date_complete = ?, ltp3_completed = ?, ltp3_date_complete = ?, ltp4_completed = ?, ltp4_date_complete = ?, other_goals = ?, current_saving = ?, notes = ?, middle_initial = ?, apt# = ?, city = ?, state = ?, marital_status = ?, birth_date = ?, emergency_contact = ?, emergency_contact_description = ?, emergency_contact_info = ? WHERE mentee_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE mentee_id = ?";

	protected final String SQL_MENTOR_MENTEE = "SELECT concat(first_name,' ',last_name) as name , mentees.mentee_id  FROM mentees ,mentor_mentee  "
			+ "WHERE mentees.mentee_id = mentor_mentee.mentee_id and mentor_mentee.mentor_id = ?";
	
	
	/** 
	 * Index of column mentee_id
	 */
	protected static final int COLUMN_MENTEE_ID = 1;

	/** 
	 * Index of column first_name
	 */
	protected static final int COLUMN_FIRST_NAME = 2;

	/** 
	 * Index of column last_name
	 */
	protected static final int COLUMN_LAST_NAME = 3;

	/** 
	 * Index of column sex
	 */
	protected static final int COLUMN_SEX = 4;

	/** 
	 * Index of column age
	 */
	protected static final int COLUMN_AGE = 5;

	/** 
	 * Index of column address
	 */
	protected static final int COLUMN_ADDRESS = 6;

	/** 
	 * Index of column zipcode
	 */
	protected static final int COLUMN_ZIPCODE = 7;

	/** 
	 * Index of column highest_education_level
	 */
	protected static final int COLUMN_HIGHEST_EDUCATION_LEVEL = 8;

	/** 
	 * Index of column pretraining_completed
	 */
	protected static final int COLUMN_PRETRAINING_COMPLETED = 9;

	/** 
	 * Index of column pretraining_date_complete
	 */
	protected static final int COLUMN_PRETRAINING_DATE_COMPLETE = 10;

	/** 
	 * Index of column ltp1_completed
	 */
	protected static final int COLUMN_LTP1_COMPLETED = 11;

	/** 
	 * Index of column ltp1_date_complete
	 */
	protected static final int COLUMN_LTP1_DATE_COMPLETE = 12;

	/** 
	 * Index of column ltp2_completed
	 */
	protected static final int COLUMN_LTP2_COMPLETED = 13;

	/** 
	 * Index of column ltp2_date_complete
	 */
	protected static final int COLUMN_LTP2_DATE_COMPLETE = 14;

	/** 
	 * Index of column ltp3_completed
	 */
	protected static final int COLUMN_LTP3_COMPLETED = 15;

	/** 
	 * Index of column ltp3_date_complete
	 */
	protected static final int COLUMN_LTP3_DATE_COMPLETE = 16;

	/** 
	 * Index of column ltp4_completed
	 */
	protected static final int COLUMN_LTP4_COMPLETED = 17;

	/** 
	 * Index of column ltp4_date_complete
	 */
	protected static final int COLUMN_LTP4_DATE_COMPLETE = 18;

	/** 
	 * Index of column other_goals
	 */
	protected static final int COLUMN_OTHER_GOALS = 19;

	/** 
	 * Index of column current_saving
	 */
	protected static final int COLUMN_CURRENT_SAVING = 20;

	/** 
	 * Index of column notes
	 */
	protected static final int COLUMN_NOTES = 21;

	/** 
	 * Index of column middle_initial
	 */
	protected static final int COLUMN_MIDDLE_INITIAL = 22;

	/** 
	 * Index of column apt#
	 */
	protected static final int COLUMN_APT = 23;

	/** 
	 * Index of column city
	 */
	protected static final int COLUMN_CITY = 24;

	/** 
	 * Index of column state
	 */
	protected static final int COLUMN_STATE = 25;

	/** 
	 * Index of column marital_status
	 */
	protected static final int COLUMN_MARITAL_STATUS = 26;

	/** 
	 * Index of column birth_date
	 */
	protected static final int COLUMN_BIRTH_DATE = 27;

	/** 
	 * Index of column emergency_contact
	 */
	protected static final int COLUMN_EMERGENCY_CONTACT = 28;

	/** 
	 * Index of column emergency_contact_description
	 */
	protected static final int COLUMN_EMERGENCY_CONTACT_DESCRIPTION = 29;

	/** 
	 * Index of column emergency_contact_info
	 */
	protected static final int COLUMN_EMERGENCY_CONTACT_INFO = 30;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 30;

	/** 
	 * Index of primary-key column mentee_id
	 */
	protected static final int PK_COLUMN_MENTEE_ID = 1;

	/** 
	 * Inserts a new row in the mentees table.
	 */
	public MenteesPk insert(Mentees dto) throws MenteesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			SQL_INSERT = "INSERT INTO " + getTableName() + " VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

			
			stmt = conn.prepareStatement( SQL_INSERT);
			int index = 1;
			System.err.println(stmt.getParameterMetaData().getParameterCount());
			
			stmt.setInt( index++, dto.getMenteeId() );
			stmt.setString( index++, dto.getFirstName() );
			stmt.setString( index++, dto.getLastName() ); 
			stmt.setString( index++, dto.getPretrainingCompleted() );
			stmt.setDate(index++, dto.getPretrainingDateComplete()==null ? null : new java.sql.Date( dto.getPretrainingDateComplete().getTime() ) );
			
			stmt.setString( index++, dto.getLtp1Completed() );
			stmt.setDate(index++, dto.getLtp1DateComplete()==null ? null : new java.sql.Date( dto.getLtp1DateComplete().getTime() ) );
			stmt.setString( index++, dto.getLtp2Completed() );
			stmt.setDate(index++, dto.getLtp2DateComplete()==null ? null : new java.sql.Date( dto.getLtp2DateComplete().getTime() ) );
			stmt.setString( index++, dto.getLtp3Completed() );
			stmt.setDate(index++, dto.getLtp3DateComplete()==null ? null : new java.sql.Date( dto.getLtp3DateComplete().getTime() ) );
			stmt.setString( index++, dto.getLtp4Completed() );
			stmt.setDate(index++, dto.getLtp4DateComplete()==null ? null : new java.sql.Date( dto.getLtp4DateComplete().getTime() ) );
			
			stmt.setString( index++, dto.getOtherGoals() );
			if (dto.isCurrentSavingNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCurrentSaving() );
			}
			
			stmt.setString( index++, dto.getNotes() );
			stmt.setString( index++, dto.getMiddleInitial() );
			if (dto.isAgeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAge() );
			}
			stmt.setString( index++, dto.getAddress() );
			stmt.setString( index++, dto.getApt() );
			stmt.setString( index++, dto.getCity() );
			stmt.setString( index++, dto.getState() );
			stmt.setString( index++, dto.getZipcode() );
			stmt.setString( index++, dto.getMaritalStatus() );
			stmt.setString( index++, dto.getSex() );
			stmt.setString( index++, dto.getHighestEducationLevel() );
			stmt.setDate(index++, dto.getBirthDate()==null ? null : new java.sql.Date( dto.getBirthDate().getTime() ) );
			stmt.setString( index++, dto.getEmergencyContact() );
			stmt.setString( index++, dto.getEmergencyContactDescription() );
			stmt.setString( index++, dto.getEmergencyContactInfo() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MenteesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the mentees table.
	 */
	public void update(MenteesPk pk, Mentees dto) throws MenteesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getMenteeId() );
			stmt.setString( index++, dto.getFirstName() );
			stmt.setString( index++, dto.getLastName() );
			stmt.setString( index++, dto.getSex() );
			if (dto.isAgeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAge() );
			}
		
			stmt.setString( index++, dto.getAddress() );
			stmt.setString( index++, dto.getZipcode() );
			stmt.setString( index++, dto.getHighestEducationLevel() );
			stmt.setString( index++, dto.getPretrainingCompleted() );
			stmt.setDate(index++, dto.getPretrainingDateComplete()==null ? null : new java.sql.Date( dto.getPretrainingDateComplete().getTime() ) );
			stmt.setString( index++, dto.getLtp1Completed() );
			stmt.setDate(index++, dto.getLtp1DateComplete()==null ? null : new java.sql.Date( dto.getLtp1DateComplete().getTime() ) );
			stmt.setString( index++, dto.getLtp2Completed() );
			stmt.setDate(index++, dto.getLtp2DateComplete()==null ? null : new java.sql.Date( dto.getLtp2DateComplete().getTime() ) );
			stmt.setString( index++, dto.getLtp3Completed() );
			stmt.setDate(index++, dto.getLtp3DateComplete()==null ? null : new java.sql.Date( dto.getLtp3DateComplete().getTime() ) );
			stmt.setString( index++, dto.getLtp4Completed() );
			stmt.setDate(index++, dto.getLtp4DateComplete()==null ? null : new java.sql.Date( dto.getLtp4DateComplete().getTime() ) );
			stmt.setString( index++, dto.getOtherGoals() );
			if (dto.isCurrentSavingNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCurrentSaving() );
			}
		
			stmt.setString( index++, dto.getNotes() );
			stmt.setString( index++, dto.getMiddleInitial() );
			stmt.setString( index++, dto.getApt() );
			stmt.setString( index++, dto.getCity() );
			stmt.setString( index++, dto.getState() );
			stmt.setString( index++, dto.getMaritalStatus() );
			stmt.setDate(index++, dto.getBirthDate()==null ? null : new java.sql.Date( dto.getBirthDate().getTime() ) );
			stmt.setString( index++, dto.getEmergencyContact() );
			stmt.setString( index++, dto.getEmergencyContactDescription() );
			stmt.setString( index++, dto.getEmergencyContactInfo() );
			stmt.setInt( 31, pk.getMenteeId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MenteesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the mentees table.
	 */
	public void delete(MenteesPk pk) throws MenteesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getMenteeId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MenteesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the mentees table that matches the specified primary-key value.
	 */
	public Mentees findByPrimaryKey(MenteesPk pk) throws MenteesDaoException
	{
		return findByPrimaryKey( pk.getMenteeId() );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Mentees findByPrimaryKey(int menteeId) throws MenteesDaoException
	{
		Mentees ret[] = findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ?", new Object[] {  new Integer(menteeId) } );
		return ret.length==0 ? null : ret[0];
	}
	
	
	/** 
	 * Returns all rows from the mentees table that match the criteria 'mentee_id = :menteeId'.
	 */
	public ArrayList<HashMap<String, String>>  findMentorMentees(int mentorID) throws MenteesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_MENTOR_MENTEE;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			stmt.setObject(1, mentorID);
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			ArrayList<HashMap<String, String>> resultList = new ArrayList();
			while (rs.next()) {
				HashMap<String, String> hash = new HashMap<String, String>();
				hash.put(rs.getString(1), rs.getString(2));
				resultList.add(hash);
			}
			return resultList;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MenteesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'SSN = :ssn'.
	 */
	public Mentees[] findWhereSsnEquals(String ssn) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SSN = ? ORDER BY SSN", new Object[] { ssn } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'maritial_status = :maritialStatus'.
	 */
	public Mentees[] findWhereMaritialStatusEquals(String maritialStatus) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE maritial_status = ? ORDER BY maritial_status", new Object[] { maritialStatus } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria ''.
	 */
	public Mentees[] findAll() throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY mentee_id", null );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Mentees[] findWhereMenteeIdEquals(int menteeId) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ? ORDER BY mentee_id", new Object[] {  new Integer(menteeId) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'first_name = :firstName'.
	 */
	public Mentees[] findWhereFirstNameEquals(String firstName) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE first_name = ? ORDER BY first_name", new Object[] { firstName } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'last_name = :lastName'.
	 */
	public Mentees[] findWhereLastNameEquals(String lastName) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE last_name = ? ORDER BY last_name", new Object[] { lastName } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'pretraining_completed = :pretrainingCompleted'.
	 */
	public Mentees[] findWherePretrainingCompletedEquals(String pretrainingCompleted) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pretraining_completed = ? ORDER BY pretraining_completed", new Object[] { pretrainingCompleted } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'pretraining_date_complete = :pretrainingDateComplete'.
	 */
	public Mentees[] findWherePretrainingDateCompleteEquals(Date pretrainingDateComplete) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pretraining_date_complete = ? ORDER BY pretraining_date_complete", new Object[] { pretrainingDateComplete==null ? null : new java.sql.Date( pretrainingDateComplete.getTime() ) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp1_completed = :ltp1Completed'.
	 */
	public Mentees[] findWhereLtp1CompletedEquals(String ltp1Completed) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ltp1_completed = ? ORDER BY ltp1_completed", new Object[] { ltp1Completed } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp1_date_complete = :ltp1DateComplete'.
	 */
	public Mentees[] findWhereLtp1DateCompleteEquals(Date ltp1DateComplete) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ltp1_date_complete = ? ORDER BY ltp1_date_complete", new Object[] { ltp1DateComplete==null ? null : new java.sql.Date( ltp1DateComplete.getTime() ) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp2_completed = :ltp2Completed'.
	 */
	public Mentees[] findWhereLtp2CompletedEquals(String ltp2Completed) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ltp2_completed = ? ORDER BY ltp2_completed", new Object[] { ltp2Completed } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp2_date_complete = :ltp2DateComplete'.
	 */
	public Mentees[] findWhereLtp2DateCompleteEquals(Date ltp2DateComplete) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ltp2_date_complete = ? ORDER BY ltp2_date_complete", new Object[] { ltp2DateComplete==null ? null : new java.sql.Date( ltp2DateComplete.getTime() ) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp3_completed = :ltp3Completed'.
	 */
	public Mentees[] findWhereLtp3CompletedEquals(String ltp3Completed) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ltp3_completed = ? ORDER BY ltp3_completed", new Object[] { ltp3Completed } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp3_date_complete = :ltp3DateComplete'.
	 */
	public Mentees[] findWhereLtp3DateCompleteEquals(Date ltp3DateComplete) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ltp3_date_complete = ? ORDER BY ltp3_date_complete", new Object[] { ltp3DateComplete==null ? null : new java.sql.Date( ltp3DateComplete.getTime() ) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp4_completed = :ltp4Completed'.
	 */
	public Mentees[] findWhereLtp4CompletedEquals(String ltp4Completed) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ltp4_completed = ? ORDER BY ltp4_completed", new Object[] { ltp4Completed } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp4_date_complete = :ltp4DateComplete'.
	 */
	public Mentees[] findWhereLtp4DateCompleteEquals(Date ltp4DateComplete) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ltp4_date_complete = ? ORDER BY ltp4_date_complete", new Object[] { ltp4DateComplete==null ? null : new java.sql.Date( ltp4DateComplete.getTime() ) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'other_goals = :otherGoals'.
	 */
	public Mentees[] findWhereOtherGoalsEquals(String otherGoals) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE other_goals = ? ORDER BY other_goals", new Object[] { otherGoals } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'current_saving = :currentSaving'.
	 */
	public Mentees[] findWhereCurrentSavingEquals(int currentSaving) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_saving = ? ORDER BY current_saving", new Object[] {  new Integer(currentSaving) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'notes = :notes'.
	 */
	public Mentees[] findWhereNotesEquals(String notes) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE notes = ? ORDER BY notes", new Object[] { notes } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'middle_initial = :middleInitial'.
	 */
	public Mentees[] findWhereMiddleInitialEquals(String middleInitial) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE middle_initial = ? ORDER BY middle_initial", new Object[] { middleInitial } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'age = :age'.
	 */
	public Mentees[] findWhereAgeEquals(int age) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE age = ? ORDER BY age", new Object[] {  new Integer(age) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'address = :address'.
	 */
	public Mentees[] findWhereAddressEquals(String address) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE address = ? ORDER BY address", new Object[] { address } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'apt# = :apt'.
	 */
	public Mentees[] findWhereAptEquals(String apt) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE apt# = ? ORDER BY apt#", new Object[] { apt } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'city = :city'.
	 */
	public Mentees[] findWhereCityEquals(String city) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE city = ? ORDER BY city", new Object[] { city } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'state = :state'.
	 */
	public Mentees[] findWhereStateEquals(String state) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE state = ? ORDER BY state", new Object[] { state } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'zipcode = :zipcode'.
	 */
	public Mentees[] findWhereZipcodeEquals(String zipcode) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE zipcode = ? ORDER BY zipcode", new Object[] { zipcode } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'marital_status = :maritalStatus'.
	 */
	public Mentees[] findWhereMaritalStatusEquals(String maritalStatus) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE marital_status = ? ORDER BY marital_status", new Object[] { maritalStatus } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'sex = :sex'.
	 */
	public Mentees[] findWhereSexEquals(String sex) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sex = ? ORDER BY sex", new Object[] { sex } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'highest_education_level = :highestEducationLevel'.
	 */
	public Mentees[] findWhereHighestEducationLevelEquals(String highestEducationLevel) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE highest_education_level = ? ORDER BY highest_education_level", new Object[] { highestEducationLevel } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'birth_date = :birthDate'.
	 */
	public Mentees[] findWhereBirthDateEquals(Date birthDate) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE birth_date = ? ORDER BY birth_date", new Object[] { birthDate==null ? null : new java.sql.Date( birthDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'emergency_contact = :emergencyContact'.
	 */
	public Mentees[] findWhereEmergencyContactEquals(String emergencyContact) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE emergency_contact = ? ORDER BY emergency_contact", new Object[] { emergencyContact } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'emergency_contact_description = :emergencyContactDescription'.
	 */
	public Mentees[] findWhereEmergencyContactDescriptionEquals(String emergencyContactDescription) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE emergency_contact_description = ? ORDER BY emergency_contact_description", new Object[] { emergencyContactDescription } );
	}

	/** 
	 * Returns all rows from the mentees table that match the criteria 'emergency_contact_info = :emergencyContactInfo'.
	 */
	public Mentees[] findWhereEmergencyContactInfoEquals(String emergencyContactInfo) throws MenteesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE emergency_contact_info = ? ORDER BY emergency_contact_info", new Object[] { emergencyContactInfo } );
	}

	/**
	 * Method 'MenteesDaoImpl'
	 * 
	 */
	public MenteesDaoImpl()
	{
	}

	/**
	 * Method 'MenteesDaoImpl'
	 * 
	 * @param userConn
	 */
	public MenteesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "mentees";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Mentees fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Mentees dto = new Mentees();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Mentees[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Mentees dto = new Mentees();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Mentees ret[] = new Mentees[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Mentees dto, ResultSet rs) throws SQLException
	{
		dto.setMenteeId( rs.getInt( COLUMN_MENTEE_ID ) );
		dto.setFirstName( rs.getString( COLUMN_FIRST_NAME ) );
		dto.setLastName( rs.getString( COLUMN_LAST_NAME ) );
		dto.setSex( rs.getString( COLUMN_SEX ) );
		dto.setAge( rs.getInt( COLUMN_AGE ) );
		if (rs.wasNull()) {
			dto.setAgeNull( true );
		}
		
		dto.setAddress( rs.getString( COLUMN_ADDRESS ) );
		dto.setZipcode( rs.getString( COLUMN_ZIPCODE ) );
		dto.setHighestEducationLevel( rs.getString( COLUMN_HIGHEST_EDUCATION_LEVEL ) );
		dto.setPretrainingCompleted( rs.getString( COLUMN_PRETRAINING_COMPLETED ) );
		dto.setPretrainingDateComplete( rs.getDate(COLUMN_PRETRAINING_DATE_COMPLETE ) );
		dto.setLtp1Completed( rs.getString( COLUMN_LTP1_COMPLETED ) );
		dto.setLtp1DateComplete( rs.getDate(COLUMN_LTP1_DATE_COMPLETE ) );
		dto.setLtp2Completed( rs.getString( COLUMN_LTP2_COMPLETED ) );
		dto.setLtp2DateComplete( rs.getDate(COLUMN_LTP2_DATE_COMPLETE ) );
		dto.setLtp3Completed( rs.getString( COLUMN_LTP3_COMPLETED ) );
		dto.setLtp3DateComplete( rs.getDate(COLUMN_LTP3_DATE_COMPLETE ) );
		dto.setLtp4Completed( rs.getString( COLUMN_LTP4_COMPLETED ) );
		dto.setLtp4DateComplete( rs.getDate(COLUMN_LTP4_DATE_COMPLETE ) );
		dto.setOtherGoals( rs.getString( COLUMN_OTHER_GOALS ) );
		dto.setCurrentSaving( rs.getInt( COLUMN_CURRENT_SAVING ) );
		if (rs.wasNull()) {
			dto.setCurrentSavingNull( true );
		}
		
		dto.setNotes( rs.getString( COLUMN_NOTES ) );
		dto.setMiddleInitial( rs.getString( COLUMN_MIDDLE_INITIAL ) );
		dto.setApt( rs.getString( COLUMN_APT ) );
		dto.setCity( rs.getString( COLUMN_CITY ) );
		dto.setState( rs.getString( COLUMN_STATE ) );
		dto.setMaritalStatus( rs.getString( COLUMN_MARITAL_STATUS ) );
		dto.setBirthDate( rs.getDate(COLUMN_BIRTH_DATE ) );
		dto.setEmergencyContact( rs.getString( COLUMN_EMERGENCY_CONTACT ) );
		dto.setEmergencyContactDescription( rs.getString( COLUMN_EMERGENCY_CONTACT_DESCRIPTION ) );
		dto.setEmergencyContactInfo( rs.getString( COLUMN_EMERGENCY_CONTACT_INFO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Mentees dto)
	{
	}

	/** 
	 * Returns all rows from the mentees table that match the specified arbitrary SQL statement
	 */
	public Mentees[] findByDynamicSelect(String sql, Object[] sqlParams) throws MenteesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MenteesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the mentees table that match the specified arbitrary SQL statement
	 */
	public Mentees[] findByDynamicWhere(String sql, Object[] sqlParams) throws MenteesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MenteesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
