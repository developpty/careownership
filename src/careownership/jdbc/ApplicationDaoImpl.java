/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.jdbc;

import careownership.dao.*;
import careownership.factory.*;
import java.util.Date;
import careownership.dto.*;
import careownership.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ApplicationDaoImpl extends AbstractDAO implements ApplicationDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT mentee_id, contact_type, initial_contact_made, application_highest_education_level, drug_abuse_history, drug_abuse_history_description, homeless_history, homeless_history_description, alcohol_abuse_history, alcohol_abuse_history_description, religious_background, mental_illness_history, mental_illness_history_description, criminal_history, criminal_history_description, date_of_most_recent_criminal_offence, probation_end_date, other_initial_conditions, application_notes, application_received_date, application_recieved_method, previous_home_ownership, application_status, interview_description, application_approved_date, date_begins_program, application_reference, application_reference_affliation, application_reference_contact_info FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( mentee_id, contact_type, initial_contact_made, application_highest_education_level, drug_abuse_history, drug_abuse_history_description, homeless_history, homeless_history_description, alcohol_abuse_history, alcohol_abuse_history_description, religious_background, mental_illness_history, mental_illness_history_description, criminal_history, criminal_history_description, date_of_most_recent_criminal_offence, probation_end_date, other_initial_conditions, application_notes, application_received_date, application_recieved_method, previous_home_ownership, application_status, interview_description, application_approved_date, date_begins_program, application_reference, application_reference_affliation, application_reference_contact_info ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET mentee_id = ?, contact_type = ?, initial_contact_made = ?, application_highest_education_level = ?, drug_abuse_history = ?, drug_abuse_history_description = ?, homeless_history = ?, homeless_history_description = ?, alcohol_abuse_history = ?, alcohol_abuse_history_description = ?, religious_background = ?, mental_illness_history = ?, mental_illness_history_description = ?, criminal_history = ?, criminal_history_description = ?, date_of_most_recent_criminal_offence = ?, probation_end_date = ?, other_initial_conditions = ?, application_notes = ?, application_received_date = ?, application_recieved_method = ?, previous_home_ownership = ?, application_status = ?, interview_description = ?, application_approved_date = ?, date_begins_program = ?, application_reference = ?, application_reference_affliation = ?, application_reference_contact_info = ? WHERE mentee_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE mentee_id = ?";

	/** 
	 * Index of column mentee_id
	 */
	protected static final int COLUMN_MENTEE_ID = 1;

	/** 
	 * Index of column contact_type
	 */
	protected static final int COLUMN_CONTACT_TYPE = 2;

	/** 
	 * Index of column initial_contact_made
	 */
	protected static final int COLUMN_INITIAL_CONTACT_MADE = 3;

	/** 
	 * Index of column application_highest_education_level
	 */
	protected static final int COLUMN_APPLICATION_HIGHEST_EDUCATION_LEVEL = 4;

	/** 
	 * Index of column drug_abuse_history
	 */
	protected static final int COLUMN_DRUG_ABUSE_HISTORY = 5;

	/** 
	 * Index of column drug_abuse_history_description
	 */
	protected static final int COLUMN_DRUG_ABUSE_HISTORY_DESCRIPTION = 6;

	/** 
	 * Index of column homeless_history
	 */
	protected static final int COLUMN_HOMELESS_HISTORY = 7;

	/** 
	 * Index of column homeless_history_description
	 */
	protected static final int COLUMN_HOMELESS_HISTORY_DESCRIPTION = 8;

	/** 
	 * Index of column alcohol_abuse_history
	 */
	protected static final int COLUMN_ALCOHOL_ABUSE_HISTORY = 9;

	/** 
	 * Index of column alcohol_abuse_history_description
	 */
	protected static final int COLUMN_ALCOHOL_ABUSE_HISTORY_DESCRIPTION = 10;

	/** 
	 * Index of column religious_background
	 */
	protected static final int COLUMN_RELIGIOUS_BACKGROUND = 11;

	/** 
	 * Index of column mental_illness_history
	 */
	protected static final int COLUMN_MENTAL_ILLNESS_HISTORY = 12;

	/** 
	 * Index of column mental_illness_history_description
	 */
	protected static final int COLUMN_MENTAL_ILLNESS_HISTORY_DESCRIPTION = 13;

	/** 
	 * Index of column criminal_history
	 */
	protected static final int COLUMN_CRIMINAL_HISTORY = 14;

	/** 
	 * Index of column criminal_history_description
	 */
	protected static final int COLUMN_CRIMINAL_HISTORY_DESCRIPTION = 15;

	/** 
	 * Index of column date_of_most_recent_criminal_offence
	 */
	protected static final int COLUMN_DATE_OF_MOST_RECENT_CRIMINAL_OFFENCE = 16;

	/** 
	 * Index of column probation_end_date
	 */
	protected static final int COLUMN_PROBATION_END_DATE = 17;

	/** 
	 * Index of column other_initial_conditions
	 */
	protected static final int COLUMN_OTHER_INITIAL_CONDITIONS = 18;

	/** 
	 * Index of column application_notes
	 */
	protected static final int COLUMN_APPLICATION_NOTES = 19;

	/** 
	 * Index of column application_received_date
	 */
	protected static final int COLUMN_APPLICATION_RECEIVED_DATE = 20;

	/** 
	 * Index of column application_recieved_method
	 */
	protected static final int COLUMN_APPLICATION_RECIEVED_METHOD = 21;

	/** 
	 * Index of column previous_home_ownership
	 */
	protected static final int COLUMN_PREVIOUS_HOME_OWNERSHIP = 22;

	/** 
	 * Index of column application_status
	 */
	protected static final int COLUMN_APPLICATION_STATUS = 23;

	/** 
	 * Index of column interview_description
	 */
	protected static final int COLUMN_INTERVIEW_DESCRIPTION = 24;

	/** 
	 * Index of column application_approved_date
	 */
	protected static final int COLUMN_APPLICATION_APPROVED_DATE = 25;

	/** 
	 * Index of column date_begins_program
	 */
	protected static final int COLUMN_DATE_BEGINS_PROGRAM = 26;

	/** 
	 * Index of column application_reference
	 */
	protected static final int COLUMN_APPLICATION_REFERENCE = 27;

	/** 
	 * Index of column application_reference_affliation
	 */
	protected static final int COLUMN_APPLICATION_REFERENCE_AFFLIATION = 28;

	/** 
	 * Index of column application_reference_contact_info
	 */
	protected static final int COLUMN_APPLICATION_REFERENCE_CONTACT_INFO = 29;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 29;

	/** 
	 * Index of primary-key column mentee_id
	 */
	protected static final int PK_COLUMN_MENTEE_ID = 1;

	/** 
	 * Inserts a new row in the application table.
	 */
	public ApplicationPk insert(Application dto) throws ApplicationDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getMenteeId() );
			stmt.setString( index++, dto.getContactType() );
			stmt.setString( index++, dto.getInitialContactMade() );
			stmt.setString( index++, dto.getApplicationHighestEducationLevel() );
			stmt.setString( index++, dto.getDrugAbuseHistory() );
			stmt.setString( index++, dto.getDrugAbuseHistoryDescription() );
			stmt.setString( index++, dto.getHomelessHistory() );
			stmt.setString( index++, dto.getHomelessHistoryDescription() );
			stmt.setString( index++, dto.getAlcoholAbuseHistory() );
			stmt.setString( index++, dto.getAlcoholAbuseHistoryDescription() );
			stmt.setString( index++, dto.getReligiousBackground() );
			stmt.setString( index++, dto.getMentalIllnessHistory() );
			stmt.setString( index++, dto.getMentalIllnessHistoryDescription() );
			stmt.setString( index++, dto.getCriminalHistory() );
			stmt.setString( index++, dto.getCriminalHistoryDescription() );
			stmt.setDate(index++, dto.getDateOfMostRecentCriminalOffence()==null ? null : new java.sql.Date( dto.getDateOfMostRecentCriminalOffence().getTime() ) );
			stmt.setDate(index++, dto.getProbationEndDate()==null ? null : new java.sql.Date( dto.getProbationEndDate().getTime() ) );
			stmt.setString( index++, dto.getOtherInitialConditions() );
			stmt.setString( index++, dto.getApplicationNotes() );
			stmt.setDate(index++, dto.getApplicationReceivedDate()==null ? null : new java.sql.Date( dto.getApplicationReceivedDate().getTime() ) );
			stmt.setString( index++, dto.getApplicationRecievedMethod() );
			stmt.setString( index++, dto.getPreviousHomeOwnership() );
			stmt.setString( index++, dto.getApplicationStatus() );
			stmt.setString( index++, dto.getInterviewDescription() );
			stmt.setDate(index++, dto.getApplicationApprovedDate()==null ? null : new java.sql.Date( dto.getApplicationApprovedDate().getTime() ) );
			stmt.setDate(index++, dto.getDateBeginsProgram()==null ? null : new java.sql.Date( dto.getDateBeginsProgram().getTime() ) );
			stmt.setString( index++, dto.getApplicationReference() );
			stmt.setString( index++, dto.getApplicationReferenceAffliation() );
			stmt.setString( index++, dto.getApplicationReferenceContactInfo() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ApplicationDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the application table.
	 */
	public void update(ApplicationPk pk, Application dto) throws ApplicationDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getMenteeId() );
			stmt.setString( index++, dto.getContactType() );
			stmt.setString( index++, dto.getInitialContactMade() );
			stmt.setString( index++, dto.getApplicationHighestEducationLevel() );
			stmt.setString( index++, dto.getDrugAbuseHistory() );
			stmt.setString( index++, dto.getDrugAbuseHistoryDescription() );
			stmt.setString( index++, dto.getHomelessHistory() );
			stmt.setString( index++, dto.getHomelessHistoryDescription() );
			stmt.setString( index++, dto.getAlcoholAbuseHistory() );
			stmt.setString( index++, dto.getAlcoholAbuseHistoryDescription() );
			stmt.setString( index++, dto.getReligiousBackground() );
			stmt.setString( index++, dto.getMentalIllnessHistory() );
			stmt.setString( index++, dto.getMentalIllnessHistoryDescription() );
			stmt.setString( index++, dto.getCriminalHistory() );
			stmt.setString( index++, dto.getCriminalHistoryDescription() );
			stmt.setDate(index++, dto.getDateOfMostRecentCriminalOffence()==null ? null : new java.sql.Date( dto.getDateOfMostRecentCriminalOffence().getTime() ) );
			stmt.setDate(index++, dto.getProbationEndDate()==null ? null : new java.sql.Date( dto.getProbationEndDate().getTime() ) );
			stmt.setString( index++, dto.getOtherInitialConditions() );
			stmt.setString( index++, dto.getApplicationNotes() );
			stmt.setDate(index++, dto.getApplicationReceivedDate()==null ? null : new java.sql.Date( dto.getApplicationReceivedDate().getTime() ) );
			stmt.setString( index++, dto.getApplicationRecievedMethod() );
			stmt.setString( index++, dto.getPreviousHomeOwnership() );
			stmt.setString( index++, dto.getApplicationStatus() );
			stmt.setString( index++, dto.getInterviewDescription() );
			stmt.setDate(index++, dto.getApplicationApprovedDate()==null ? null : new java.sql.Date( dto.getApplicationApprovedDate().getTime() ) );
			stmt.setDate(index++, dto.getDateBeginsProgram()==null ? null : new java.sql.Date( dto.getDateBeginsProgram().getTime() ) );
			stmt.setString( index++, dto.getApplicationReference() );
			stmt.setString( index++, dto.getApplicationReferenceAffliation() );
			stmt.setString( index++, dto.getApplicationReferenceContactInfo() );
			stmt.setInt( 30, pk.getMenteeId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ApplicationDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the application table.
	 */
	public void delete(ApplicationPk pk) throws ApplicationDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getMenteeId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ApplicationDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the application table that matches the specified primary-key value.
	 */
	public Application findByPrimaryKey(ApplicationPk pk) throws ApplicationDaoException
	{
		return findByPrimaryKey( pk.getMenteeId() );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Application findByPrimaryKey(int menteeId) throws ApplicationDaoException
	{
		Application ret[] = findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ?", new Object[] {  new Integer(menteeId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the application table that match the criteria ''.
	 */
	public Application[] findAll() throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY mentee_id", null );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Application[] findByMentees(int menteeId) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ?", new Object[] {  new Integer(menteeId) } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Application[] findWhereMenteeIdEquals(int menteeId) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ? ORDER BY mentee_id", new Object[] {  new Integer(menteeId) } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'contact_type = :contactType'.
	 */
	public Application[] findWhereContactTypeEquals(String contactType) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_type = ? ORDER BY contact_type", new Object[] { contactType } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'initial_contact_made = :initialContactMade'.
	 */
	public Application[] findWhereInitialContactMadeEquals(String initialContactMade) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE initial_contact_made = ? ORDER BY initial_contact_made", new Object[] { initialContactMade } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_highest_education_level = :applicationHighestEducationLevel'.
	 */
	public Application[] findWhereApplicationHighestEducationLevelEquals(String applicationHighestEducationLevel) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_highest_education_level = ? ORDER BY application_highest_education_level", new Object[] { applicationHighestEducationLevel } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'drug_abuse_history = :drugAbuseHistory'.
	 */
	public Application[] findWhereDrugAbuseHistoryEquals(String drugAbuseHistory) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE drug_abuse_history = ? ORDER BY drug_abuse_history", new Object[] { drugAbuseHistory } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'drug_abuse_history_description = :drugAbuseHistoryDescription'.
	 */
	public Application[] findWhereDrugAbuseHistoryDescriptionEquals(String drugAbuseHistoryDescription) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE drug_abuse_history_description = ? ORDER BY drug_abuse_history_description", new Object[] { drugAbuseHistoryDescription } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'homeless_history = :homelessHistory'.
	 */
	public Application[] findWhereHomelessHistoryEquals(String homelessHistory) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE homeless_history = ? ORDER BY homeless_history", new Object[] { homelessHistory } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'homeless_history_description = :homelessHistoryDescription'.
	 */
	public Application[] findWhereHomelessHistoryDescriptionEquals(String homelessHistoryDescription) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE homeless_history_description = ? ORDER BY homeless_history_description", new Object[] { homelessHistoryDescription } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'alcohol_abuse_history = :alcoholAbuseHistory'.
	 */
	public Application[] findWhereAlcoholAbuseHistoryEquals(String alcoholAbuseHistory) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE alcohol_abuse_history = ? ORDER BY alcohol_abuse_history", new Object[] { alcoholAbuseHistory } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'alcohol_abuse_history_description = :alcoholAbuseHistoryDescription'.
	 */
	public Application[] findWhereAlcoholAbuseHistoryDescriptionEquals(String alcoholAbuseHistoryDescription) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE alcohol_abuse_history_description = ? ORDER BY alcohol_abuse_history_description", new Object[] { alcoholAbuseHistoryDescription } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'religious_background = :religiousBackground'.
	 */
	public Application[] findWhereReligiousBackgroundEquals(String religiousBackground) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE religious_background = ? ORDER BY religious_background", new Object[] { religiousBackground } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'mental_illness_history = :mentalIllnessHistory'.
	 */
	public Application[] findWhereMentalIllnessHistoryEquals(String mentalIllnessHistory) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mental_illness_history = ? ORDER BY mental_illness_history", new Object[] { mentalIllnessHistory } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'mental_illness_history_description = :mentalIllnessHistoryDescription'.
	 */
	public Application[] findWhereMentalIllnessHistoryDescriptionEquals(String mentalIllnessHistoryDescription) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mental_illness_history_description = ? ORDER BY mental_illness_history_description", new Object[] { mentalIllnessHistoryDescription } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'criminal_history = :criminalHistory'.
	 */
	public Application[] findWhereCriminalHistoryEquals(String criminalHistory) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE criminal_history = ? ORDER BY criminal_history", new Object[] { criminalHistory } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'criminal_history_description = :criminalHistoryDescription'.
	 */
	public Application[] findWhereCriminalHistoryDescriptionEquals(String criminalHistoryDescription) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE criminal_history_description = ? ORDER BY criminal_history_description", new Object[] { criminalHistoryDescription } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'date_of_most_recent_criminal_offence = :dateOfMostRecentCriminalOffence'.
	 */
	public Application[] findWhereDateOfMostRecentCriminalOffenceEquals(Date dateOfMostRecentCriminalOffence) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_of_most_recent_criminal_offence = ? ORDER BY date_of_most_recent_criminal_offence", new Object[] { dateOfMostRecentCriminalOffence==null ? null : new java.sql.Date( dateOfMostRecentCriminalOffence.getTime() ) } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'probation_end_date = :probationEndDate'.
	 */
	public Application[] findWhereProbationEndDateEquals(Date probationEndDate) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE probation_end_date = ? ORDER BY probation_end_date", new Object[] { probationEndDate==null ? null : new java.sql.Date( probationEndDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'other_initial_conditions = :otherInitialConditions'.
	 */
	public Application[] findWhereOtherInitialConditionsEquals(String otherInitialConditions) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE other_initial_conditions = ? ORDER BY other_initial_conditions", new Object[] { otherInitialConditions } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_notes = :applicationNotes'.
	 */
	public Application[] findWhereApplicationNotesEquals(String applicationNotes) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_notes = ? ORDER BY application_notes", new Object[] { applicationNotes } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_received_date = :applicationReceivedDate'.
	 */
	public Application[] findWhereApplicationReceivedDateEquals(Date applicationReceivedDate) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_received_date = ? ORDER BY application_received_date", new Object[] { applicationReceivedDate==null ? null : new java.sql.Date( applicationReceivedDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_recieved_method = :applicationRecievedMethod'.
	 */
	public Application[] findWhereApplicationRecievedMethodEquals(String applicationRecievedMethod) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_recieved_method = ? ORDER BY application_recieved_method", new Object[] { applicationRecievedMethod } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'previous_home_ownership = :previousHomeOwnership'.
	 */
	public Application[] findWherePreviousHomeOwnershipEquals(String previousHomeOwnership) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE previous_home_ownership = ? ORDER BY previous_home_ownership", new Object[] { previousHomeOwnership } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_status = :applicationStatus'.
	 */
	public Application[] findWhereApplicationStatusEquals(String applicationStatus) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_status = ? ORDER BY application_status", new Object[] { applicationStatus } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'interview_description = :interviewDescription'.
	 */
	public Application[] findWhereInterviewDescriptionEquals(String interviewDescription) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE interview_description = ? ORDER BY interview_description", new Object[] { interviewDescription } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_approved_date = :applicationApprovedDate'.
	 */
	public Application[] findWhereApplicationApprovedDateEquals(Date applicationApprovedDate) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_approved_date = ? ORDER BY application_approved_date", new Object[] { applicationApprovedDate==null ? null : new java.sql.Date( applicationApprovedDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'date_begins_program = :dateBeginsProgram'.
	 */
	public Application[] findWhereDateBeginsProgramEquals(Date dateBeginsProgram) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_begins_program = ? ORDER BY date_begins_program", new Object[] { dateBeginsProgram==null ? null : new java.sql.Date( dateBeginsProgram.getTime() ) } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_reference = :applicationReference'.
	 */
	public Application[] findWhereApplicationReferenceEquals(String applicationReference) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_reference = ? ORDER BY application_reference", new Object[] { applicationReference } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_reference_affliation = :applicationReferenceAffliation'.
	 */
	public Application[] findWhereApplicationReferenceAffliationEquals(String applicationReferenceAffliation) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_reference_affliation = ? ORDER BY application_reference_affliation", new Object[] { applicationReferenceAffliation } );
	}

	/** 
	 * Returns all rows from the application table that match the criteria 'application_reference_contact_info = :applicationReferenceContactInfo'.
	 */
	public Application[] findWhereApplicationReferenceContactInfoEquals(String applicationReferenceContactInfo) throws ApplicationDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE application_reference_contact_info = ? ORDER BY application_reference_contact_info", new Object[] { applicationReferenceContactInfo } );
	}

	/**
	 * Method 'ApplicationDaoImpl'
	 * 
	 */
	public ApplicationDaoImpl()
	{
	}

	/**
	 * Method 'ApplicationDaoImpl'
	 * 
	 * @param userConn
	 */
	public ApplicationDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "application";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Application fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Application dto = new Application();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Application[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Application dto = new Application();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Application ret[] = new Application[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Application dto, ResultSet rs) throws SQLException
	{
		dto.setMenteeId( rs.getInt( COLUMN_MENTEE_ID ) );
		dto.setContactType( rs.getString( COLUMN_CONTACT_TYPE ) );
		dto.setInitialContactMade( rs.getString( COLUMN_INITIAL_CONTACT_MADE ) );
		dto.setApplicationHighestEducationLevel( rs.getString( COLUMN_APPLICATION_HIGHEST_EDUCATION_LEVEL ) );
		dto.setDrugAbuseHistory( rs.getString( COLUMN_DRUG_ABUSE_HISTORY ) );
		dto.setDrugAbuseHistoryDescription( rs.getString( COLUMN_DRUG_ABUSE_HISTORY_DESCRIPTION ) );
		dto.setHomelessHistory( rs.getString( COLUMN_HOMELESS_HISTORY ) );
		dto.setHomelessHistoryDescription( rs.getString( COLUMN_HOMELESS_HISTORY_DESCRIPTION ) );
		dto.setAlcoholAbuseHistory( rs.getString( COLUMN_ALCOHOL_ABUSE_HISTORY ) );
		dto.setAlcoholAbuseHistoryDescription( rs.getString( COLUMN_ALCOHOL_ABUSE_HISTORY_DESCRIPTION ) );
		dto.setReligiousBackground( rs.getString( COLUMN_RELIGIOUS_BACKGROUND ) );
		dto.setMentalIllnessHistory( rs.getString( COLUMN_MENTAL_ILLNESS_HISTORY ) );
		dto.setMentalIllnessHistoryDescription( rs.getString( COLUMN_MENTAL_ILLNESS_HISTORY_DESCRIPTION ) );
		dto.setCriminalHistory( rs.getString( COLUMN_CRIMINAL_HISTORY ) );
		dto.setCriminalHistoryDescription( rs.getString( COLUMN_CRIMINAL_HISTORY_DESCRIPTION ) );
		dto.setDateOfMostRecentCriminalOffence( rs.getDate(COLUMN_DATE_OF_MOST_RECENT_CRIMINAL_OFFENCE ) );
		dto.setProbationEndDate( rs.getDate(COLUMN_PROBATION_END_DATE ) );
		dto.setOtherInitialConditions( rs.getString( COLUMN_OTHER_INITIAL_CONDITIONS ) );
		dto.setApplicationNotes( rs.getString( COLUMN_APPLICATION_NOTES ) );
		dto.setApplicationReceivedDate( rs.getDate(COLUMN_APPLICATION_RECEIVED_DATE ) );
		dto.setApplicationRecievedMethod( rs.getString( COLUMN_APPLICATION_RECIEVED_METHOD ) );
		dto.setPreviousHomeOwnership( rs.getString( COLUMN_PREVIOUS_HOME_OWNERSHIP ) );
		dto.setApplicationStatus( rs.getString( COLUMN_APPLICATION_STATUS ) );
		dto.setInterviewDescription( rs.getString( COLUMN_INTERVIEW_DESCRIPTION ) );
		dto.setApplicationApprovedDate( rs.getDate(COLUMN_APPLICATION_APPROVED_DATE ) );
		dto.setDateBeginsProgram( rs.getDate(COLUMN_DATE_BEGINS_PROGRAM ) );
		dto.setApplicationReference( rs.getString( COLUMN_APPLICATION_REFERENCE ) );
		dto.setApplicationReferenceAffliation( rs.getString( COLUMN_APPLICATION_REFERENCE_AFFLIATION ) );
		dto.setApplicationReferenceContactInfo( rs.getString( COLUMN_APPLICATION_REFERENCE_CONTACT_INFO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Application dto)
	{
	}

	/** 
	 * Returns all rows from the application table that match the specified arbitrary SQL statement
	 */
	public Application[] findByDynamicSelect(String sql, Object[] sqlParams) throws ApplicationDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ApplicationDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the application table that match the specified arbitrary SQL statement
	 */
	public Application[] findByDynamicWhere(String sql, Object[] sqlParams) throws ApplicationDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ApplicationDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
