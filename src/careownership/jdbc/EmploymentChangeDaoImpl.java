/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.jdbc;

import careownership.dao.*;
import careownership.factory.*;
import java.util.Date;
import careownership.dto.*;
import careownership.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmploymentChangeDaoImpl extends AbstractDAO implements EmploymentChangeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT employment_change_id, current_position, current_monthly_earnings, current_employer, date_of_change, current_notes, mentee_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( employment_change_id, current_position, current_monthly_earnings, current_employer, date_of_change, current_notes, mentee_id ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET employment_change_id = ?, current_position = ?, current_monthly_earnings = ?, current_employer = ?, date_of_change = ?, current_notes = ?, mentee_id = ? WHERE employment_change_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE employment_change_id = ?";

	/** 
	 * Index of column employment_change_id
	 */
	protected static final int COLUMN_EMPLOYMENT_CHANGE_ID = 1;

	/** 
	 * Index of column current_position
	 */
	protected static final int COLUMN_CURRENT_POSITION = 2;

	/** 
	 * Index of column current_monthly_earnings
	 */
	protected static final int COLUMN_CURRENT_MONTHLY_EARNINGS = 3;

	/** 
	 * Index of column current_employer
	 */
	protected static final int COLUMN_CURRENT_EMPLOYER = 4;

	/** 
	 * Index of column date_of_change
	 */
	protected static final int COLUMN_DATE_OF_CHANGE = 5;

	/** 
	 * Index of column current_notes
	 */
	protected static final int COLUMN_CURRENT_NOTES = 6;

	/** 
	 * Index of column mentee_id
	 */
	protected static final int COLUMN_MENTEE_ID = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column employment_change_id
	 */
	protected static final int PK_COLUMN_EMPLOYMENT_CHANGE_ID = 1;

	/** 
	 * Inserts a new row in the employment_change table.
	 */
	public EmploymentChangePk insert(EmploymentChange dto) throws EmploymentChangeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getEmploymentChangeId() );
			stmt.setString( index++, dto.getCurrentPosition() );
			if (dto.isCurrentMonthlyEarningsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCurrentMonthlyEarnings() );
			}
		
			stmt.setString( index++, dto.getCurrentEmployer() );
			stmt.setDate(index++, dto.getDateOfChange()==null ? null : new java.sql.Date( dto.getDateOfChange().getTime() ) );
			stmt.setString( index++, dto.getCurrentNotes() );
			stmt.setInt( index++, dto.getMenteeId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setEmploymentChangeId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmploymentChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the employment_change table.
	 */
	public void update(EmploymentChangePk pk, EmploymentChange dto) throws EmploymentChangeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getEmploymentChangeId() );
			stmt.setString( index++, dto.getCurrentPosition() );
			if (dto.isCurrentMonthlyEarningsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCurrentMonthlyEarnings() );
			}
		
			stmt.setString( index++, dto.getCurrentEmployer() );
			stmt.setDate(index++, dto.getDateOfChange()==null ? null : new java.sql.Date( dto.getDateOfChange().getTime() ) );
			stmt.setString( index++, dto.getCurrentNotes() );
			stmt.setInt( index++, dto.getMenteeId() );
			stmt.setInt( 8, pk.getEmploymentChangeId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmploymentChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the employment_change table.
	 */
	public void delete(EmploymentChangePk pk) throws EmploymentChangeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getEmploymentChangeId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmploymentChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the employment_change table that matches the specified primary-key value.
	 */
	public EmploymentChange findByPrimaryKey(EmploymentChangePk pk) throws EmploymentChangeDaoException
	{
		return findByPrimaryKey( pk.getEmploymentChangeId() );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'employment_change_id = :employmentChangeId'.
	 */
	public EmploymentChange findByPrimaryKey(int employmentChangeId) throws EmploymentChangeDaoException
	{
		EmploymentChange ret[] = findByDynamicSelect( SQL_SELECT + " WHERE employment_change_id = ?", new Object[] {  new Integer(employmentChangeId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria ''.
	 */
	public EmploymentChange[] findAll() throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY employment_change_id", null );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'mentee_id = :menteeId'.
	 */
	public EmploymentChange[] findByMentees(int menteeId) throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ?", new Object[] {  new Integer(menteeId) } );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'employment_change_id = :employmentChangeId'.
	 */
	public EmploymentChange[] findWhereEmploymentChangeIdEquals(int employmentChangeId) throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE employment_change_id = ? ORDER BY employment_change_id", new Object[] {  new Integer(employmentChangeId) } );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'current_position = :currentPosition'.
	 */
	public EmploymentChange[] findWhereCurrentPositionEquals(String currentPosition) throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_position = ? ORDER BY current_position", new Object[] { currentPosition } );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'current_monthly_earnings = :currentMonthlyEarnings'.
	 */
	public EmploymentChange[] findWhereCurrentMonthlyEarningsEquals(int currentMonthlyEarnings) throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_monthly_earnings = ? ORDER BY current_monthly_earnings", new Object[] {  new Integer(currentMonthlyEarnings) } );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'current_employer = :currentEmployer'.
	 */
	public EmploymentChange[] findWhereCurrentEmployerEquals(String currentEmployer) throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_employer = ? ORDER BY current_employer", new Object[] { currentEmployer } );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'date_of_change = :dateOfChange'.
	 */
	public EmploymentChange[] findWhereDateOfChangeEquals(Date dateOfChange) throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_of_change = ? ORDER BY date_of_change", new Object[] { dateOfChange==null ? null : new java.sql.Date( dateOfChange.getTime() ) } );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'current_notes = :currentNotes'.
	 */
	public EmploymentChange[] findWhereCurrentNotesEquals(String currentNotes) throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_notes = ? ORDER BY current_notes", new Object[] { currentNotes } );
	}

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'mentee_id = :menteeId'.
	 */
	public EmploymentChange[] findWhereMenteeIdEquals(int menteeId) throws EmploymentChangeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mentee_id = ? ORDER BY mentee_id", new Object[] {  new Integer(menteeId) } );
	}

	/**
	 * Method 'EmploymentChangeDaoImpl'
	 * 
	 */
	public EmploymentChangeDaoImpl()
	{
	}

	/**
	 * Method 'EmploymentChangeDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmploymentChangeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "employment_change";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EmploymentChange fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EmploymentChange dto = new EmploymentChange();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EmploymentChange[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EmploymentChange dto = new EmploymentChange();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EmploymentChange ret[] = new EmploymentChange[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EmploymentChange dto, ResultSet rs) throws SQLException
	{
		dto.setEmploymentChangeId( rs.getInt( COLUMN_EMPLOYMENT_CHANGE_ID ) );
		dto.setCurrentPosition( rs.getString( COLUMN_CURRENT_POSITION ) );
		dto.setCurrentMonthlyEarnings( rs.getInt( COLUMN_CURRENT_MONTHLY_EARNINGS ) );
		if (rs.wasNull()) {
			dto.setCurrentMonthlyEarningsNull( true );
		}
		
		dto.setCurrentEmployer( rs.getString( COLUMN_CURRENT_EMPLOYER ) );
		dto.setDateOfChange( rs.getDate(COLUMN_DATE_OF_CHANGE ) );
		dto.setCurrentNotes( rs.getString( COLUMN_CURRENT_NOTES ) );
		dto.setMenteeId( rs.getInt( COLUMN_MENTEE_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EmploymentChange dto)
	{
	}

	/** 
	 * Returns all rows from the employment_change table that match the specified arbitrary SQL statement
	 */
	public EmploymentChange[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmploymentChangeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmploymentChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the employment_change table that match the specified arbitrary SQL statement
	 */
	public EmploymentChange[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmploymentChangeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmploymentChangeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
