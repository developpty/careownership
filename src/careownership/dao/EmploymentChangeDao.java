/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.dao;

import java.util.Date;
import careownership.dto.*;
import careownership.exceptions.*;

public interface EmploymentChangeDao
{
	/** 
	 * Inserts a new row in the employment_change table.
	 */
	public EmploymentChangePk insert(EmploymentChange dto) throws EmploymentChangeDaoException;

	/** 
	 * Updates a single row in the employment_change table.
	 */
	public void update(EmploymentChangePk pk, EmploymentChange dto) throws EmploymentChangeDaoException;

	/** 
	 * Deletes a single row in the employment_change table.
	 */
	public void delete(EmploymentChangePk pk) throws EmploymentChangeDaoException;

	/** 
	 * Returns the rows from the employment_change table that matches the specified primary-key value.
	 */
	public EmploymentChange findByPrimaryKey(EmploymentChangePk pk) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'employment_change_id = :employmentChangeId'.
	 */
	public EmploymentChange findByPrimaryKey(int employmentChangeId) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria ''.
	 */
	public EmploymentChange[] findAll() throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'mentee_id = :menteeId'.
	 */
	public EmploymentChange[] findByMentees(int menteeId) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'employment_change_id = :employmentChangeId'.
	 */
	public EmploymentChange[] findWhereEmploymentChangeIdEquals(int employmentChangeId) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'current_position = :currentPosition'.
	 */
	public EmploymentChange[] findWhereCurrentPositionEquals(String currentPosition) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'current_monthly_earnings = :currentMonthlyEarnings'.
	 */
	public EmploymentChange[] findWhereCurrentMonthlyEarningsEquals(int currentMonthlyEarnings) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'current_employer = :currentEmployer'.
	 */
	public EmploymentChange[] findWhereCurrentEmployerEquals(String currentEmployer) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'date_of_change = :dateOfChange'.
	 */
	public EmploymentChange[] findWhereDateOfChangeEquals(Date dateOfChange) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'current_notes = :currentNotes'.
	 */
	public EmploymentChange[] findWhereCurrentNotesEquals(String currentNotes) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the criteria 'mentee_id = :menteeId'.
	 */
	public EmploymentChange[] findWhereMenteeIdEquals(int menteeId) throws EmploymentChangeDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the employment_change table that match the specified arbitrary SQL statement
	 */
	public EmploymentChange[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmploymentChangeDaoException;

	/** 
	 * Returns all rows from the employment_change table that match the specified arbitrary SQL statement
	 */
	public EmploymentChange[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmploymentChangeDaoException;

}
