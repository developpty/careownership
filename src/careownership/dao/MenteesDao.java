/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import careownership.dto.*;
import careownership.exceptions.*;

public interface MenteesDao
{
	/** 
	 * Inserts a new row in the mentees table.
	 */
	public MenteesPk insert(Mentees dto) throws MenteesDaoException;

	/** 
	 * Updates a single row in the mentees table.
	 */
	public void update(MenteesPk pk, Mentees dto) throws MenteesDaoException;

	/** 
	 * Deletes a single row in the mentees table.
	 */
	public void delete(MenteesPk pk) throws MenteesDaoException;

	/** 
	 * Returns the rows from the mentees table that matches the specified primary-key value.
	 */
	public Mentees findByPrimaryKey(MenteesPk pk) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Mentees findByPrimaryKey(int menteeId) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'SSN = :ssn'.
	 */
	public Mentees[] findWhereSsnEquals(String ssn) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'maritial_status = :maritialStatus'.
	 */
	public Mentees[] findWhereMaritialStatusEquals(String maritialStatus) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria ''.
	 */
	public Mentees[] findAll() throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Mentees[] findWhereMenteeIdEquals(int menteeId) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'first_name = :firstName'.
	 */
	public Mentees[] findWhereFirstNameEquals(String firstName) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'last_name = :lastName'.
	 */
	public Mentees[] findWhereLastNameEquals(String lastName) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'pretraining_completed = :pretrainingCompleted'.
	 */
	public Mentees[] findWherePretrainingCompletedEquals(String pretrainingCompleted) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'pretraining_date_complete = :pretrainingDateComplete'.
	 */
	public Mentees[] findWherePretrainingDateCompleteEquals(Date pretrainingDateComplete) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp1_completed = :ltp1Completed'.
	 */
	public Mentees[] findWhereLtp1CompletedEquals(String ltp1Completed) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp1_date_complete = :ltp1DateComplete'.
	 */
	public Mentees[] findWhereLtp1DateCompleteEquals(Date ltp1DateComplete) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp2_completed = :ltp2Completed'.
	 */
	public Mentees[] findWhereLtp2CompletedEquals(String ltp2Completed) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp2_date_complete = :ltp2DateComplete'.
	 */
	public Mentees[] findWhereLtp2DateCompleteEquals(Date ltp2DateComplete) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp3_completed = :ltp3Completed'.
	 */
	public Mentees[] findWhereLtp3CompletedEquals(String ltp3Completed) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp3_date_complete = :ltp3DateComplete'.
	 */
	public Mentees[] findWhereLtp3DateCompleteEquals(Date ltp3DateComplete) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp4_completed = :ltp4Completed'.
	 */
	public Mentees[] findWhereLtp4CompletedEquals(String ltp4Completed) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'ltp4_date_complete = :ltp4DateComplete'.
	 */
	public Mentees[] findWhereLtp4DateCompleteEquals(Date ltp4DateComplete) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'other_goals = :otherGoals'.
	 */
	public Mentees[] findWhereOtherGoalsEquals(String otherGoals) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'current_saving = :currentSaving'.
	 */
	public Mentees[] findWhereCurrentSavingEquals(int currentSaving) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'notes = :notes'.
	 */
	public Mentees[] findWhereNotesEquals(String notes) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'middle_initial = :middleInitial'.
	 */
	public Mentees[] findWhereMiddleInitialEquals(String middleInitial) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'age = :age'.
	 */
	public Mentees[] findWhereAgeEquals(int age) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'address = :address'.
	 */
	public Mentees[] findWhereAddressEquals(String address) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'apt# = :apt'.
	 */
	public Mentees[] findWhereAptEquals(String apt) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'city = :city'.
	 */
	public Mentees[] findWhereCityEquals(String city) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'state = :state'.
	 */
	public Mentees[] findWhereStateEquals(String state) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'zipcode = :zipcode'.
	 */
	public Mentees[] findWhereZipcodeEquals(String zipcode) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'marital_status = :maritalStatus'.
	 */
	public Mentees[] findWhereMaritalStatusEquals(String maritalStatus) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'sex = :sex'.
	 */
	public Mentees[] findWhereSexEquals(String sex) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'highest_education_level = :highestEducationLevel'.
	 */
	public Mentees[] findWhereHighestEducationLevelEquals(String highestEducationLevel) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'birth_date = :birthDate'.
	 */
	public Mentees[] findWhereBirthDateEquals(Date birthDate) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'emergency_contact = :emergencyContact'.
	 */
	public Mentees[] findWhereEmergencyContactEquals(String emergencyContact) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'emergency_contact_description = :emergencyContactDescription'.
	 */
	public Mentees[] findWhereEmergencyContactDescriptionEquals(String emergencyContactDescription) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the criteria 'emergency_contact_info = :emergencyContactInfo'.
	 */
	public Mentees[] findWhereEmergencyContactInfoEquals(String emergencyContactInfo) throws MenteesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the mentees table that match the specified arbitrary SQL statement
	 */
	public Mentees[] findByDynamicSelect(String sql, Object[] sqlParams) throws MenteesDaoException;

	/** 
	 * Returns all rows from the mentees table that match the specified arbitrary SQL statement
	 */
	public Mentees[] findByDynamicWhere(String sql, Object[] sqlParams) throws MenteesDaoException;
	
	public ArrayList<HashMap<String, String>>  findMentorMentees(int mentorID) throws MenteesDaoException;

}
