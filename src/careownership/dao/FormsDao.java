/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package careownership.dao;

import java.util.Date;
import careownership.dto.*;
import careownership.exceptions.*;

public interface FormsDao
{
	/** 
	 * Inserts a new row in the forms table.
	 */
	public FormsPk insert(Forms dto) throws FormsDaoException;

	/** 
	 * Updates a single row in the forms table.
	 */
	public void update(FormsPk pk, Forms dto) throws FormsDaoException;

	/** 
	 * Deletes a single row in the forms table.
	 */
	public void delete(FormsPk pk) throws FormsDaoException;

	/** 
	 * Returns the rows from the forms table that matches the specified primary-key value.
	 */
	public Forms findByPrimaryKey(FormsPk pk) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'form_id = :formId'.
	 */
	public Forms findByPrimaryKey(int formId) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'mentor_id = :mentorId AND mentee_id = :menteeId'.
	 */
	public Forms[] findByMentorMentee(int mentorId, int menteeId) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'ending_time = :endingTime'.
	 */
	public Forms[] findWhereEndingTimeEquals(Date endingTime) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'pre_planned_purpose = :prePlannedPurpose'.
	 */
	public Forms[] findWherePrePlannedPurposeEquals(String prePlannedPurpose) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'topic_activities = :topicActivities'.
	 */
	public Forms[] findWhereTopicActivitiesEquals(String topicActivities) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'accomplishment = :accomplishment'.
	 */
	public Forms[] findWhereAccomplishmentEquals(String accomplishment) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'goals_nextmeeting = :goalsNextmeeting'.
	 */
	public Forms[] findWhereGoalsNextmeetingEquals(String goalsNextmeeting) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'mentees_next_meeting = :menteesNextMeeting'.
	 */
	public Forms[] findWhereMenteesNextMeetingEquals(String menteesNextMeeting) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'mentors_next_meeting = :mentorsNextMeeting'.
	 */
	public Forms[] findWhereMentorsNextMeetingEquals(String mentorsNextMeeting) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'time_next_meeting = :timeNextMeeting'.
	 */
	public Forms[] findWhereTimeNextMeetingEquals(Date timeNextMeeting) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'place_next_meeting = :placeNextMeeting'.
	 */
	public Forms[] findWherePlaceNextMeetingEquals(String placeNextMeeting) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria ''.
	 */
	public Forms[] findAll() throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Forms[] findByMentees(int menteeId) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'mentor_id = :mentorId'.
	 */
	public Forms[] findByMentors(int mentorId) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'form_id = :formId'.
	 */
	public Forms[] findWhereFormIdEquals(int formId) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'mentor_id = :mentorId'.
	 */
	public Forms[] findWhereMentorIdEquals(int mentorId) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'mentee_id = :menteeId'.
	 */
	public Forms[] findWhereMenteeIdEquals(int menteeId) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'meeting_time = :meetingTime'.
	 */
	public Forms[] findWhereMeetingTimeEquals(Date meetingTime) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'meeting_place = :meetingPlace'.
	 */
	public Forms[] findWhereMeetingPlaceEquals(String meetingPlace) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'meeting_notes = :meetingNotes'.
	 */
	public Forms[] findWhereMeetingNotesEquals(String meetingNotes) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'next_meeting_goals = :nextMeetingGoals'.
	 */
	public Forms[] findWhereNextMeetingGoalsEquals(String nextMeetingGoals) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'topic_covered = :topicCovered'.
	 */
	public Forms[] findWhereTopicCoveredEquals(String topicCovered) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the criteria 'topic_covered_other = :topicCoveredOther'.
	 */
	public Forms[] findWhereTopicCoveredOtherEquals(String topicCoveredOther) throws FormsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the forms table that match the specified arbitrary SQL statement
	 */
	public Forms[] findByDynamicSelect(String sql, Object[] sqlParams) throws FormsDaoException;

	/** 
	 * Returns all rows from the forms table that match the specified arbitrary SQL statement
	 */
	public Forms[] findByDynamicWhere(String sql, Object[] sqlParams) throws FormsDaoException;

}
