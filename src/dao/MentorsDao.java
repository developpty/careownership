/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package dao;

import dto.*;
import exceptions.*;

public interface MentorsDao
{

	/** 
	 * Inserts a new row in the mentors table.
	 */
	public MentorsPk insert(Mentors dto) throws MentorsDaoException;

	/** 
	 * Updates a single row in the mentors table.
	 */
	public void update(MentorsPk pk, Mentors dto) throws MentorsDaoException;

	/** 
	 * Deletes a single row in the mentors table.
	 */
	public void delete(MentorsPk pk) throws MentorsDaoException;

	/** 
	 * Returns the rows from the mentors table that matches the specified primary-key value.
	 */
	public Mentors findByPrimaryKey(MentorsPk pk) throws MentorsDaoException;

	/** 
	 * Returns all rows from the mentors table that match the criteria 'mentor_id = :mentorId'.
	 */
	public Mentors findByPrimaryKey(int mentorId) throws MentorsDaoException;

	/** 
	 * Returns all rows from the mentors table that match the criteria ''.
	 */
	public Mentors[] findAll() throws MentorsDaoException;

	/** 
	 * Returns all rows from the mentors table that match the criteria 'mentor_id = :mentorId'.
	 */
	public Mentors[] findWhereMentorIdEquals(int mentorId) throws MentorsDaoException;

	/** 
	 * Returns all rows from the mentors table that match the criteria 'full_name = :fullName'.
	 */
	public Mentors[] findWhereFullNameEquals(String fullName) throws MentorsDaoException;

	/** 
	 * Returns all rows from the mentors table that match the criteria 'login_name = :loginName'.
	 */
	public Mentors[] findWhereLoginNameEquals(String loginName) throws MentorsDaoException;

	/** 
	 * Returns all rows from the mentors table that match the criteria 'password = :password'.
	 */
	public Mentors[] findWherePasswordEquals(String password) throws MentorsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the mentors table that match the specified arbitrary SQL statement
	 */
	public Mentors[] findByDynamicSelect(String sql, Object[] sqlParams) throws MentorsDaoException;

	/** 
	 * Returns all rows from the mentors table that match the specified arbitrary SQL statement
	 */
	public Mentors[] findByDynamicWhere(String sql, Object[] sqlParams) throws MentorsDaoException;

}
